"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[19],{7737:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var r=i(5893),t=i(1151);const s={},o="2D Inbuilts",d={id:"user-guide/renderer/2D-inbuilts",title:"2D Inbuilts",description:"This document covers the four inbuilt components/views for that the 2D renderer implements.",source:"@site/docs/4-user-guide/renderer/2D-inbuilts.md",sourceDirName:"4-user-guide/renderer",slug:"/user-guide/renderer/2D-inbuilts",permalink:"/docs/user-guide/renderer/2D-inbuilts",draft:!1,unlisted:!1,editUrl:"https://github.com/path-visualiser/docs/tree/master/docs/4-user-guide/renderer/2D-inbuilts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Renderer",permalink:"/docs/category/renderer"},next:{title:"2D Renderer",permalink:"/docs/user-guide/renderer/2D-renderer"}},l={},a=[{value:"Inbuilt Views",id:"inbuilt-views",level:2},{value:"Grid View",id:"grid-view",level:3},{value:"Polyanya View",id:"polyanya-view",level:3},{value:"Road Network View",id:"road-network-view",level:3},{value:"Tree View",id:"tree-view",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"2d-inbuilts",children:"2D Inbuilts"}),"\n",(0,r.jsx)(n.p,{children:"This document covers the four inbuilt components/views for that the 2D renderer implements."}),"\n",(0,r.jsx)(n.h2,{id:"inbuilt-views",children:"Inbuilt Views"}),"\n",(0,r.jsxs)(n.p,{children:["Here are the structures/formats for the different inbuilts for the 2D renderer. All primitives used by these Inbuilts are ",(0,r.jsx)(n.a,{href:"about:blank",children:"2D renderer primitives"}),". To use any of these ",(0,r.jsx)(n.code,{children:"Inbuilt Views"})," the ",(0,r.jsx)(n.a,{href:"about:blank",children:"renderer"}),' property of the view must be set to "2d-pixi".']}),"\n",(0,r.jsx)(n.h3,{id:"grid-view",children:"Grid View"}),"\n",(0,r.jsx)(n.p,{children:"The Grid View is for grid based pathfinding algorithms, on standard 2D plane. Below is the strucutre of the Grid View component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'GridView = {\n  "grid-view": [\n    {\n      $: "rect",\n      width: 1,\n      height: 1,\n      x: "{{x}}",\n      y: "{{y}}",\n    },\n  ],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Grid View can be utilized by using view like the following"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"main": { "renderer": "2d-pixi", "components" : {"$":"grid-view"}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the search trace to be renderer each event should include an appropriate ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," coordinate for the ",(0,r.jsx)(n.code,{children:"grid-view"})," to reference too."]}),"\n",(0,r.jsx)(n.h3,{id:"polyanya-view",children:"Polyanya View"}),"\n",(0,r.jsx)(n.p,{children:"The Polyanya View is an example of navigation mesh based pathfinding algorithms, on standard 2D plane. Below is the strucutre of the Polyanya View component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'PolyanyaView = {\n  node: [\n    {\n      $: "circle",\n      radius: 1,\n      x: "{{x1}}",\n      y: "{{y1}}",\n    },\n  ],\n  line1: [\n    {\n      $: "path",\n      points: [\n        {\n          x: "{{x2}}",\n          y: "{{y2}}",\n        },\n        {\n          x: "{{x3}}",\n          y: "{{y3}}",\n        },\n      ],\n      lineWidth: 0.5,\n    },\n  ],\n  line2: [\n    {\n      $: "path",\n      points: [\n        {\n          x: "{{x1}}",\n          y: "{{y1}}",\n        },\n        {\n          x: "{{x2}}",\n          y: "{{y2}}",\n        },\n      ],\n      lineWidth: 0.5,\n    },\n  ],\n  line3: [\n    {\n      $: "path",\n      points: [\n        {\n          x: "{{x1}}",\n          y: "{{y1}}",\n        },\n        {\n          x: "{{x3}}",\n          y: "{{y3}}",\n        },\n      ],\n      lineWidth: 0.5,\n    },\n  ],\n  triangle: [\n    {\n      $: "polygon",\n      points: [\n        {\n          x: "{{x1}}",\n          y: "{{y1}}",\n        },\n        {\n          x: "{{x2}}",\n          y: "{{y2}}",\n        },\n        {\n          x: "{{x3}}",\n          y: "{{y3}}",\n        },\n      ],\n    },\n  ],\n  "polyanya-view": [\n    {\n      $: "node",\n    },\n    {\n      $: "line1",\n      persist: false,\n    },\n    {\n      $: "line2",\n      persist: false,\n    },\n    {\n      $: "line3",\n      persist: false,\n    },\n    {\n      $: "triangle",\n      persist: false,\n    },\n  ],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Polyanya View can be utilized by using view like the following"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"main": { "renderer": "2d-pixi", "components" : {"$":"polyanya-view"}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The Polyanya View has 3 main sets of variables that each event should inclue. These are the ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," coordinate for 3 points."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(x1,y1) : are the coordinates for the current location/node"}),"\n",(0,r.jsx)(n.li,{children:"(x2,y2) : are the coordinates for the [TODO]"}),"\n",(0,r.jsx)(n.li,{children:"(x3,y3) : are the coordinates for the [TODO]"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"road-network-view",children:"Road Network View"}),"\n",(0,r.jsx)(n.p,{children:"The Road Network View is for network based pathfinding algorithms, on standard 2D plane. Below is the strucutre of the Road Network View component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'RoadView = {\n  node: [\n    {\n      $: "circle",\n      radius: 0.3,\n      x: "{{x}}",\n      y: "{{y}}",\n    },\n  ],\n  line: [\n    {\n      $: "path",\n      points: [\n        {\n          x: "{{parent.x}}",\n          y: "{{parent.y}}",\n        },\n        {\n          x: "{{x}}",\n          y: "{{y}}",\n        },\n      ],\n      lineWidth: 1,\n    },\n  ],\n  "road-view": [\n    {\n      $: "node",\n    },\n    {\n      $: "line",\n    },\n  ],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Road Network View can be utilized by using view like the following"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"main": { "renderer": "2d-pixi", "components" : {"$":"road-view"}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the search trace to be renderer each event should include an appropriate ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," coordinate for the ",(0,r.jsx)(n.code,{children:"road-view"})," to reference too."]}),"\n",(0,r.jsx)(n.h3,{id:"tree-view",children:"Tree View"}),"\n",(0,r.jsx)(n.p,{children:"The Tree View is for network based pathfinding algorithms, on standard 2D plane. Below is the strucutre of the Road Network View component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'RoadView = {\n  node: [\n    {\n      $: "circle",\n      radius: 0.3,\n      x: "{{x}}",\n      y: "{{y}}",\n    },\n  ],\n  line: [\n    {\n      $: "path",\n      points: [\n        {\n          x: "{{parent.x}}",\n          y: "{{parent.y}}",\n        },\n        {\n          x: "{{x}}",\n          y: "{{y}}",\n        },\n      ],\n      lineWidth: 1,\n    },\n  ],\n  "tree-view": [\n    {\n      $: "node",\n    },\n    {\n      $: "line",\n    },\n  ],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Road Network View can be utilized by using view like the following"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"main": { "renderer": "2d-pixi", "components" : {"$":"tree-view"}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Currently, the Tree View component is identical in form to the Road View. However, unlike the Road View the Tree View does not require ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," values for the events. If these are not provided (this is determined by checking if the source has an ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"}),") then ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," will be automatically generated for all the events in a direct tree format."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var r=i(7294);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);