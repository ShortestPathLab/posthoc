"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[6635],{957:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var r=i(5893),s=i(1151);const t={sidebar_position:2},c="Search trace",a={id:"search-trace",title:"Search trace",description:"The search trace is a YAML log of your algorithm's decisions. What, and how much, you want to log is up to you. Here are some ideas.",source:"@site/docs/2-search-trace.md",sourceDirName:".",slug:"/search-trace",permalink:"/docs/search-trace",draft:!1,unlisted:!1,editUrl:"https://github.com/path-visualiser/path-visualiser.github.io/tree/master/docs/2-search-trace.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/overview"},next:{title:"Posthoc visualiser",permalink:"/docs/category/posthoc-visualiser"}},l={},o=[{value:"Decision tree",id:"decision-tree",level:2},{value:"Custom views",id:"custom-views",level:2},{value:"Nested views",id:"nested-views",level:2},{value:"Property expressions",id:"property-expressions",level:2},{value:"Special properties",id:"special-properties",level:2},{value:"<code>type</code>",id:"type",level:3},{value:"<code>clear</code>",id:"clear",level:3},{value:"<code>$for</code>",id:"for",level:3},{value:"<code>$if</code>",id:"if",level:3},{value:"<code>$info</code>",id:"info",level:3},{value:"API",id:"api",level:2},{value:"Definition",id:"definition",level:3},{value:"<code>Trace</code>",id:"trace",level:4},{value:"<code>View</code>",id:"view",level:4},{value:"<code>Property</code>",id:"property",level:4},{value:"<code>Pivot</code>",id:"pivot",level:4},{value:"<code>Event</code>",id:"event",level:4},{value:"Primitives",id:"primitives",level:3},{value:"YAML",id:"yaml",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"search-trace",children:"Search trace"}),"\n",(0,r.jsx)(n.p,{children:"The search trace is a YAML log of your algorithm's decisions. What, and how much, you want to log is up to you. Here are some ideas."}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="single-agent-search.trace.yaml"',children:"version: 1.4.0\nevents:\n  - { type: expand, id: 0, f: 0, g: 0 }\n  - { type: generate, id: 1, pId: 0, f: 1, g: 1 }\n  - { type: close, id: 0, f: 0, g: 0 }\n"})}),(0,r.jsx)("figcaption",{children:"Generic search events"})]}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="agent-moves.trace.yaml"',children:"version: 1.4.0\nevents:\n  - { type: move, agent: 47, id: 0, x: 0, y: 0 }\n  - { type: move, agent: 18, id: 0, pId: 0, x: 5, y: 2 }\n"})}),(0,r.jsx)("figcaption",{children:"Multi-agent plan execution"})]}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="rayscan.trace.yaml"',children:"version: 1.4.0\nevents:\n  - { type: raycast, id: 1, x: 1, y: 2, rayX: 3, rayY: 4 }\n  - { type: raycast, id: 1, x: 1, y: 2, rayX: 1, rayY: 4 }\n  - { type: expand, id: 2, x: 3, y: 4 }\n"})}),(0,r.jsx)("figcaption",{children:"Algorithm-specific events"})]}),"\n",(0,r.jsx)(n.p,{children:"Since YAML is a superset of JSON, your traces can be in JSON too."}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="single-agent-search.trace.json"',children:'version: 1.4.0\n{\n  "events": [\n    { "type": "expand", "id": 0, "f": 0, "g": 0 },\n    { "type": "generate", "id": 1, "pId": 0, "f": 1, "g": 1 },\n    { "type": "close", "id": 0, "f": 0, "g": 0 }\n  ]\n}\n'})}),(0,r.jsx)("figcaption",{children:"Generic search events (JSON)"})]}),"\n",(0,r.jsxs)(n.p,{children:["Search traces should have the extensions ",(0,r.jsx)(n.code,{children:".trace.yaml"})," or ",(0,r.jsx)(n.code,{children:".trace.json"}),". It's required to declare ",(0,r.jsx)(n.code,{children:"version: 1.4.0"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"decision-tree",children:"Decision tree"}),"\n",(0,r.jsxs)(n.p,{children:["View your sequential decision-making processes as a tree or directed graph. Just provide ",(0,r.jsx)(n.code,{children:"id"})," and ",(0,r.jsx)(n.code,{children:"pId"}),"(parent ID) properties in your log."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="simple-tree.trace.yaml"',children:"version: 1.4.0\nevents:\n  - { type: decision, id: a, pId: null }\n  - { type: decision, id: b, pId: a }\n  - { type: decision, id: c, pId: a }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"type"})," property is optional, but should be a descriptive name of the kind of event that was logged."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Simple tree",src:i(1107).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-views",children:"Custom views"}),"\n",(0,r.jsxs)(n.p,{children:["Give your search trace a custom visual representation by adding a ",(0,r.jsx)(n.code,{children:"views"})," section to it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'{2-9} title="custom-view.trace.yaml"',children:"version: 1.4.0\nviews:\n  main:\n    - $: rect # Show a rectangle...\n      x: ${{ $.x }} # at this coordinate...\n      y: ${{ $.y }} # at this coordinate...\n      width: 1\n      height: 1\n      fill: ${{ theme.foreground }} # with this color \ud83c\udfa8\nevents:\n  - { type: decision, id: a, x: 1, y: 1, pId: null }\n  - { type: decision, id: b, x: 1, y: 3, pId: a }\n  - { type: decision, id: c, x: 1, y: 5, pId: a }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"main"})," view acts as the entry-point, and ",(0,r.jsx)(n.code,{children:"rect"})," is a primitive provided by the built-in 2D renderer."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Simple view",src:i(6234).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsx)(n.p,{children:"It's that easy!"}),"\n",(0,r.jsx)(n.p,{children:"Custom views get you quickly going to creating something useful, but its also a language that is powerful enough to let you express complex visualisations."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Complex view",src:i(1641).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsxs)(n.a,{href:"./visualiser/pixel-renderer#api",children:[(0,r.jsx)(n.strong,{children:"Pixel"})," API reference"]})," for a list of primitives provided by the built-in renderer."]}),"\n",(0,r.jsx)(n.h2,{id:"nested-views",children:"Nested views"}),"\n",(0,r.jsx)(n.p,{children:"Nesting allows you to create copies of some element without having to repeat yourself."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="nesting.trace.yaml',children:"version: 1.4.0\nviews:\n  // highlight-next-line\n  marker: # A marker is defined here, which just draws a circle\n    - $: circle\n      fill: ${{ $.color }}\n      radius: 0.25\n      x: ${{ $.x }}\n      y: ${{ $.step }}\n  main:\n    // highlight-next-line\n    - $: marker # Render a red marker\n      color: red\n      x: ${{ $.min }}\n    // highlight-next-line\n    - $: marker # Render a green marker\n      color: green\n      x: ${{ $.max }}\n\nevents:\n  - { type: bound, step: 0, min: 1, max: 5 }\n  - { type: bound, step: 1, min: 2, max: 5 }\n  - { type: bound, step: 2, min: 2, max: 4 }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Nest views by referencing other views with the ",(0,r.jsx)(n.code,{children:"$"})," property. You can also pass properties to them, which is accessible via the ",(0,r.jsx)(n.code,{children:"$"})," object in expressions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Nesting",src:i(8557).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsx)(n.h2,{id:"property-expressions",children:"Property expressions"}),"\n",(0,r.jsxs)(n.p,{children:["You can write expressions inside ",(0,r.jsx)(n.code,{children:"${{  }}"})," brackets to reference event information or values passed from a parent view."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="expression.trace.yaml',children:"version: 1.4.0\nviews:\n  main:\n    - $: rect\n      width: 1\n      height: 1\n      // highlight-next-line\n      fill: ${{ $.color }}\n      $info:\n        // highlight-next-line\n        greeting: This rectangle is ${{ $.color }}\n\nevents:\n  - { type: event, color: orange }\n"})}),"\n",(0,r.jsx)(n.p,{children:"If a property is a single expression, the property's value and type is taken from the result of the expression. But, if the property contains multiple expressions, or if there's text around the expressions, it becomes a concatenated string instead."}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"./search-trace#api",children:"search trace API reference"})," for a list of properties available in expressions."]}),"\n",(0,r.jsx)(n.h2,{id:"special-properties",children:"Special properties"}),"\n",(0,r.jsx)(n.h3,{id:"type",children:(0,r.jsx)(n.code,{children:"type"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"type"})," property doesn't do anything, but it's used to drive some parts of ",(0,r.jsx)(n.strong,{children:"Posthoc"}),"'s UI."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Alt text",src:i(5677).Z+"",width:"657",height:"763"})}),"\n",(0,r.jsx)(n.h3,{id:"clear",children:(0,r.jsx)(n.code,{children:"clear"})}),"\n",(0,r.jsx)(n.p,{children:"Control when elements should be cleared."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Value"}),(0,r.jsx)(n.th,{children:"Usage"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"false"})," (default)"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"clear: false"})}),(0,r.jsx)(n.td,{children:"Event will remain once drawn."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"clear: true"})}),(0,r.jsx)(n.td,{children:"Event will clear immediately after the step they're drawn."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"clear: close"})}),(0,r.jsxs)(n.td,{children:["Event clears once another event of the same ",(0,r.jsx)(n.code,{children:"id"}),", and the specified type (e.g. ",(0,r.jsx)(n.code,{children:"close"}),"), is encountered."]})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="clear.trace.yaml"',children:"version: 1.4.0\nviews:\n  main:\n    - $: circle\n      x: ${{ $.step }}\n      y: 1\n      radius: 0.25\n      fill: ${{ colors.blue }}\n      // highlight-next-line\n      clear: close\nevents:\n  - { type: open, id: 1 }\n  - { type: expand, id: 1 }\n  - { type: close, id: 1, message: Open and expand events should be cleared }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"for",children:(0,r.jsx)(n.code,{children:"$for"})}),"\n",(0,r.jsx)(n.p,{children:"Repeat a view based on a value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'{11-15} title="loop.trace.yaml"',children:"version: 1.4.0\nviews:\n  main:\n    - $: circle\n      x: ${{ $.i }}\n      y: 1\n      radius: 0.25\n      fill: ${{ $.colors[$.i] }}\n      $info:\n        color: ${{ $.colors[$.i] }}\n      $for:\n        $let: i # Optional, default `i`\n        $from: 0 # Optional, default 0\n        $step: 1 # Optional, default 1\n        $to: ${{ $.colors.length }} # Required, number\nevents:\n  - { type: event, colors: [red, green, blue, orange] }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"For property",src:i(7786).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsx)(n.h3,{id:"if",children:(0,r.jsx)(n.code,{children:"$if"})}),"\n",(0,r.jsx)(n.p,{children:"Conditionally render a view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="if.trace.yaml"',children:"version: 1.4.0\nviews:\n  main:\n    - $: circle\n      radius: 1\n      x: 1\n      y: 1\n      fill: red\n      // highlight-next-line\n      $if: ${{ $.direction == 'left' }}\n    - $: rect\n      width: 1\n      height: 1\n      x: 1\n      y: 1\n      fill: red\n      // highlight-next-line\n      $if: ${{ $.direction == 'right' }}\nevents:\n  - { type: event, direction: left }\n  - { type: event, direction: right }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"info",children:(0,r.jsx)(n.code,{children:"$info"})}),"\n",(0,r.jsx)(n.p,{children:"By default, clicking on elements in the viewport will show you info about the event that rendered it. However, you can define information that will only be shown when a specific part of the event was clicked."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'{9-11,17-19} title="info.trace.yaml',children:"version: 1.4.0\nviews:\n  main:\n    - $: circle\n      fill: green\n      radius: 0.25\n      x: ${{ $.x + $.l }}\n      y: 0\n      $info:\n        message: This is the left marker\n        position: ${{ $.x }} + ${{ $.l }} = ${{ $.x + $.l }}\n    - $: circle\n      fill: red\n      radius: 0.25\n      x: ${{ $.x + $.r }}\n      y: 0\n      $info:\n        message: This is the right marker\n        position: ${{ $.x }} + ${{ $.r }} = ${{ $.x + $.r }}\nevents:\n  - { type: bound, x: 10, l: 2, r: 4 }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Info",src:i(950).Z+"",width:"2560",height:"1600"})}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,r.jsx)(n.h4,{id:"trace",children:(0,r.jsx)(n.code,{children:"Trace"})}),"\n",(0,r.jsx)(n.p,{children:"The root of a search trace file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Trace = {\n  version: string;\n  views?: Dictionary<View[]>;\n  pivot?: Pivot;\n  events?: Event[];\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"view",children:(0,r.jsx)(n.code,{children:"View"})}),"\n",(0,r.jsx)(n.p,{children:"A primitive or higher-order view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type View = {\n  $: string;\n  [K in string]?: Property<any>;\n  clear?: Property<boolean | string>;\n  $info?: Dictionary<Property<any>>;\n  $if?: Property<boolean>;\n  $for?: {\n    $let?: string;\n    $from?: Property<number>;\n    $to?: Property<number>;\n    $to?: Property<number>;\n  };\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"property",children:(0,r.jsx)(n.code,{children:"Property"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Property<T> = T | PropertyExpression<T>;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where ",(0,r.jsx)(n.code,{children:"PropertyExpression<T>"})," is a ",(0,r.jsx)(n.a,{href:"#property-expressions",children:"property expression"})," that evaluates to type T."]}),"\n",(0,r.jsx)(n.h4,{id:"pivot",children:(0,r.jsx)(n.code,{children:"Pivot"})}),"\n",(0,r.jsx)(n.p,{children:"Define the center-point of an event."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Pivot = {\n  scale?: Property<number>;\n  x?: Property<number>;\n  y?: Property<number>;\n  z?: Property<number>;\n  w?: Property<number>;\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"event",children:(0,r.jsx)(n.code,{children:"Event"})}),"\n",(0,r.jsx)(n.p,{children:"A recorded event."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Event = Dictionary<any>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"primitives",children:"Primitives"}),"\n",(0,r.jsxs)(n.p,{children:["The search trace format itself doesn't define any primitives. Renderers do. For the built-in renderer, ",(0,r.jsx)(n.strong,{children:"Pixel"}),", see the ",(0,r.jsxs)(n.a,{href:"visualiser/pixel-renderer#primitives",children:[(0,r.jsx)(n.strong,{children:"Pixel"})," primitives here"]}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"yaml",children:"YAML"}),"\n",(0,r.jsxs)(n.p,{children:["The search trace is a YAML document. Check out the ",(0,r.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/",children:"YAML 1.2.2 documentation"})," for all the ways you can write YAML."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1641:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/complex-view-223a700f28d621ab7a77e34f80eb04ab.png"},7786:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/for-property-c87fdd4573ea433dddda4426707b4d3f.png"},5677:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/image-2-797c45446a75e30405e0025ea33d1104.png"},950:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/info-f11c5f6a5fd1de5c1f3ebce102c51725.png"},8557:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/nesting-0f619bb07e3d8ac6d111b03507c058f6.png"},6234:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/simple-rendering-1f8ae5ac70f6059ca50b2f10025fa150.png"},1107:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/simple-tree-ea8b85e47ad3d4081ec880110c7651b8.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>c});var r=i(7294);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);